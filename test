#!/usr/bin/env ruby
# @see https://github.com/simnalamburt/snucse.pl/blob/master/test

Dir.chdir File.dirname __FILE__

require 'curses'
require 'parallel'

GREEN = 1
RED = 2
$results = []

Curses::noecho
Curses::init_screen
Curses::start_color
Curses::init_pair(GREEN, 83, Curses::COLOR_BLACK)
Curses::init_pair(RED, 166, Curses::COLOR_BLACK)

#
# Helpers
#
def assert(actual, msg = 'Assertion failed')
  return true if actual

  $results << msg
  false
end

def assert_eq msg, actual, expected
  return true if expected == actual

  $results << '%s, Expected : "%s", Actual : "%s"' % [msg, expected.chomp, actual.chomp]
  false
end

class Fixnum
  def digits
    return 1 if self == 0
    Math.log10(abs).to_i + 1
  end
end

class Curses::Window
  def print(msg)
    self << msg
    refresh
  end

  def color(col)
    color_set col
    yield
    color_set 0
  end

  def counter(count)
    Counter.new(self, count)
  end

  def ok(bool)
    col, msg = bool ? [GREEN, "✓\n"] : [RED, "✗\n"]
    color(col) { print msg * maxy }
  end

  def results(array)
    self.result array.count(true), array.count
  end

  def result(succeeded, total)
    succeeded = succeeded.to_i
    total = total.to_i

    icon, col = succeeded == total && total != 0 ? ['✓', GREEN] : ['✗', RED]
    color(col) { self << icon }

    print ' (%d/%d, %g%%)' % [succeeded, total, succeeded * 100.0 / total]
  end
end

class Counter
  def initialize win, total
    @win = win
    # @format = "%%0#{(total - 1).digits}d/#{total}"
    @format = "%0d/#{total}"
    @iter = 0
    @total = total
    @print_length = 0
  end

  def tick
    msg = @format % @iter
    @win.print "\b"*@print_length + msg

    @iter += 1
    @print_length = msg.length
  end

  def clean
    @win.print "\b"*@print_length + ' '*@print_length + "\b"*@print_length

    @iter = @total
    @print_length = 0
  end

  def count; return @iter end
end


#
# Tests
#
class Test
  @@tasks = []
  @@pos = 3

  @@left = 3
  #TODO
  head = Curses::Window.new(2, 0, 1, @@left)
  head.print <<-HEAD
     Tests │ Status
───────────┼───────────
  HEAD


  def self.add(*params)
    height = params.length
    
    left = Curses::Window.new(height, 8, @@pos, 7)
    left << params.map { |x| x + ' |' } .join("\n")
    left.refresh

    win = Curses::Window.new(height, 0, @@pos, 16)
    @@tasks << Thread.new do
      yield win
    end
    @@pos += height
  end

  def self.wait
    @@tasks.each { |thr| thr.join }

    line = Curses::Window.new(0, 2, 0, 43)
    line << "|\n" * line.maxy
    line.refresh

    win = Curses::Window.new(0, 0, 1, 45)
    win.keypad true
    win.scrollok true

    if $results.empty?
      win << '    All Green!'
    else
      win << $results.join("\n")
    end

    win.print "\n\n    Press 'q' to exit "

    loop do
      break if win.getch == 'q'
    end
  end
end

def run_test win, dirname, ext = ''
  `cd #{dirname} && make 2>/dev/null`

  tests = Dir["#{dirname}/examples/*.out"]
  counter = win.counter tests.count

  results = tests.map do |name|
    no = File.basename(name, ".#{ext}") + " of #{dirname}"
    
    code = File.basename(name, '.out')

    expected = File.read(name).chomp
    input = File.join(dirname, 'examples', File.basename(name, '.out') + '.in')

    actual = unless File.exist?(input)
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} 2>/dev/null`.chomp
    else
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} < #{input} 2>/dev/null`.chomp
    end
    if /^Type Checking Failed/ === actual then actual = 'Type Checking Failed' end

    counter.tick
    assert_eq no, actual, expected
  end
  counter.clean
  win.results results
end

# Test.add '   sm5' do |win|
  # kminus win, 'sm5', 'k--'
# end

# Test.add '    gc' do |win|
  # kminus win, 'gc', 'sm5'
# end

Test.add 'kminus' do |win|
  run_test win, 'kminus', 'k-'
end

Test.add '     m' do |win| 
  run_test win, 'm', 'm'
end

Test.add 'simple' do |win|
  run_test win, 'simple', 'm'
end

Test.add '  poly' do |win|
  run_test win, 'poly', 'm'
end


Test.wait
